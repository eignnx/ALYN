---
source: src/ast_to_ir.rs
expression: "parse_and_convert(\"\n            subr matsum(n: nat, a: **int, b: **int, c: **int) {\n                let col = 0;\n                while col < n {\n                    let row = 0;\n                    while row < n {\n                        let ax = *(*(a + col) + row);\n                        let bx = *(*(b + col) + row);\n                        *(*(c + col) + row) = ax + bx;\n                        row = row + 1;\n                    }\n                    col = col + 1;\n                }\n            }\n        \")"
---
Ok(
    [
        %col <- 0,
        :local<while_cond#0>;
        if %col u(<) %n then local<while_body#1> else local<end_while#2>;
        :local<while_body#1>;
        %row <- 0;
        :local<while_cond#3>;
        if %row u(<) %n then local<while_body#4> else local<end_while#5>;
        :local<while_body#4>;
        %ax <- M[(M[(%a + %col)] + %row)];
        %bx <- M[(M[(%b + %col)] + %row)];
        M[(M[(%c + %col)] + %row)] <- (%ax + %bx);
        %row <- (%row + 1);
        jmp local<while_cond#3>;
        :local<end_while#5>;
        %col <- (%col + 1);
        jmp local<while_cond#0>;
        :local<end_while#2>,
    ],
)
