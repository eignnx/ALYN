
subr swap(arr: *int, i: nat, j: nat) {
    let tmp = *(arr + i);
    *(arr + i) = *(arr + j);
    *(arr + j) = tmp;
}

subr partition(arr: *int, lo: nat, hi: nat, pivot: int) nat {
    // [pivot, unknown, unknown, unknown, ...]
    //  ^last  ^idx

    // [pivot, smaller, smaller, larger, larger, unknown, unknown, ...]
    //                  ^last                    ^idx
    let last = lo;
    let idx = lo + 1; // skip pivot
    while idx < hi {
        if *(arr + idx) < pivot {
            last = last + 1;
            swap(arr, last, idx);
        }
        idx = idx + 1;
    }
    swap(arr, lo, last); // swap pivot back into middle
}

// MEMORY:
// ..., *, *, [*, *, *, *, *, *], *, *, *, ...
//             ^arr==arr+lo       ^arr+hi
subr quicksort_impl(arr: *int, lo: nat, hi: nat) {
    if hi <= lo { ret; }
    let mid = lo + (hi - lo) >> 1;
    swap(arr, lo, mid); // swap pivot to front
    let pivot = *(arr + mid);

    let split = partition(arr, lo, hi, pivot);

    quicksort_impl(arr, lo, split);
    quicksort_impl(arr, split, hi);
}

subr quicksort(arr: *int, len: nat) {
    quicksort_impl(arr, 0, len);
}
